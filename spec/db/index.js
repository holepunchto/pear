// This file is autogenerated by the hyperdb compiler
/* eslint-disable camelcase */

const { IndexEncoder, c } = require('hyperdb/runtime')

const { version, resolveStruct } = require('./messages.js')

// '@pear/dht' collection key
const collection0_key = new IndexEncoder([
], { prefix: 0 })

function collection0_indexify (record) {
  return []
}

// '@pear/dht' reconstruction function
function collection0_reconstruct (version, keyBuf, valueBuf) {
  const value = c.decode(resolveStruct('@pear/dht/value', version), valueBuf)
  return value
}

// '@pear/dht'
const collection0 = {
  name: '@pear/dht',
  id: 0,
  encodeKey (record) {
    const key = []
    return collection0_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection0_key.encodeRange({
      gt: gt ? collection0_indexify(gt) : null,
      lt: lt ? collection0_indexify(lt) : null,
      gte: gte ? collection0_indexify(gte) : null,
      lte: lte ? collection0_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/dht/value', version), record)
  },
  trigger: null,
  reconstruct: collection0_reconstruct,
  indexes: []
}

// '@pear/encryption-keys' collection key
const collection1_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 1 })

function collection1_indexify (record) {
  const a = record.publicKey
  return a === undefined ? [] : [a]
}

// '@pear/encryption-keys' reconstruction function
function collection1_reconstruct (version, keyBuf, valueBuf) {
  const key = collection1_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@pear/encryption-keys/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    publicKey: key[0],
    ...value
  }
}

// '@pear/encryption-keys'
const collection1 = {
  name: '@pear/encryption-keys',
  id: 1,
  encodeKey (record) {
    const key = [record.publicKey]
    return collection1_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection1_key.encodeRange({
      gt: gt ? collection1_indexify(gt) : null,
      lt: lt ? collection1_indexify(lt) : null,
      gte: gte ? collection1_indexify(gte) : null,
      lte: lte ? collection1_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/encryption-keys/value', version), record)
  },
  trigger: null,
  reconstruct: collection1_reconstruct,
  indexes: []
}

// '@pear/permits' collection key
const collection2_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 2 })

function collection2_indexify (record) {
  const a = record.z32
  return a === undefined ? [] : [a]
}

// '@pear/permits' reconstruction function
function collection2_reconstruct (version, keyBuf, valueBuf) {
  const key = collection2_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@pear/permits/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    z32: key[0],
    ...value
  }
}

// '@pear/permits'
const collection2 = {
  name: '@pear/permits',
  id: 2,
  encodeKey (record) {
    const key = [record.z32]
    return collection2_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection2_key.encodeRange({
      gt: gt ? collection2_indexify(gt) : null,
      lt: lt ? collection2_indexify(lt) : null,
      gte: gte ? collection2_indexify(gte) : null,
      lte: lte ? collection2_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/permits/value', version), record)
  },
  trigger: null,
  reconstruct: collection2_reconstruct,
  indexes: []
}

// '@pear/identity' collection key
const collection3_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 3 })

function collection3_indexify (record) {
  const a = record.publicKey
  return a === undefined ? [] : [a]
}

// '@pear/identity' reconstruction function
function collection3_reconstruct (version, keyBuf, valueBuf) {
  const key = collection3_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@pear/identity/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    publicKey: key[0],
    ...value
  }
}

// '@pear/identity'
const collection3 = {
  name: '@pear/identity',
  id: 3,
  encodeKey (record) {
    const key = [record.publicKey]
    return collection3_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection3_key.encodeRange({
      gt: gt ? collection3_indexify(gt) : null,
      lt: lt ? collection3_indexify(lt) : null,
      gte: gte ? collection3_indexify(gte) : null,
      lte: lte ? collection3_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/identity/value', version), record)
  },
  trigger: null,
  reconstruct: collection3_reconstruct,
  indexes: []
}

// '@pear/apps' collection key
const collection4_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 4 })

function collection4_indexify (record) {
  const a = record.key
  return a === undefined ? [] : [a]
}

// '@pear/apps' reconstruction function
function collection4_reconstruct (version, keyBuf, valueBuf) {
  const key = collection4_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@pear/apps/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    key: key[0],
    ...value
  }
}

// '@pear/apps'
const collection4 = {
  name: '@pear/apps',
  id: 4,
  encodeKey (record) {
    const key = [record.key]
    return collection4_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection4_key.encodeRange({
      gt: gt ? collection4_indexify(gt) : null,
      lt: lt ? collection4_indexify(lt) : null,
      gte: gte ? collection4_indexify(gte) : null,
      lte: lte ? collection4_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/apps/value', version), record)
  },
  trigger: null,
  reconstruct: collection4_reconstruct,
  indexes: []
}

// '@pear/apps-owned' collection key
const collection5_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 5 })

function collection5_indexify (record) {
  const a = record.key
  return a === undefined ? [] : [a]
}

// '@pear/apps-owned' reconstruction function
function collection5_reconstruct (version, keyBuf, valueBuf) {
  const key = collection5_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@pear/apps-owned/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    key: key[0],
    ...value
  }
}

// '@pear/apps-owned'
const collection5 = {
  name: '@pear/apps-owned',
  id: 5,
  encodeKey (record) {
    const key = [record.key]
    return collection5_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection5_key.encodeRange({
      gt: gt ? collection5_indexify(gt) : null,
      lt: lt ? collection5_indexify(lt) : null,
      gte: gte ? collection5_indexify(gte) : null,
      lte: lte ? collection5_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/apps-owned/value', version), record)
  },
  trigger: null,
  reconstruct: collection5_reconstruct,
  indexes: []
}

// '@pear/app-storage' collection key
const collection6_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 6 })

function collection6_indexify (record) {
  const a = record.app
  return a === undefined ? [] : [a]
}

// '@pear/app-storage' reconstruction function
function collection6_reconstruct (version, keyBuf, valueBuf) {
  const key = collection6_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@pear/app-storage/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    app: key[0],
    ...value
  }
}

// '@pear/app-storage'
const collection6 = {
  name: '@pear/app-storage',
  id: 6,
  encodeKey (record) {
    const key = [record.app]
    return collection6_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection6_key.encodeRange({
      gt: gt ? collection6_indexify(gt) : null,
      lt: lt ? collection6_indexify(lt) : null,
      gte: gte ? collection6_indexify(gte) : null,
      lte: lte ? collection6_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/app-storage/value', version), record)
  },
  trigger: null,
  reconstruct: collection6_reconstruct,
  indexes: []
}

// '@pear/channels' collection key
const collection7_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 7 })

function collection7_indexify (record) {
  const a = record.key
  return a === undefined ? [] : [a]
}

// '@pear/channels' reconstruction function
function collection7_reconstruct (version, keyBuf, valueBuf) {
  const key = collection7_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@pear/channels/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    key: key[0],
    ...value
  }
}

// '@pear/channels'
const collection7 = {
  name: '@pear/channels',
  id: 7,
  encodeKey (record) {
    const key = [record.key]
    return collection7_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection7_key.encodeRange({
      gt: gt ? collection7_indexify(gt) : null,
      lt: lt ? collection7_indexify(lt) : null,
      gte: gte ? collection7_indexify(gte) : null,
      lte: lte ? collection7_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/channels/value', version), record)
  },
  trigger: null,
  reconstruct: collection7_reconstruct,
  indexes: []
}

// '@pear/error-logs' collection key
const collection8_key = new IndexEncoder([
  IndexEncoder.STRING
], { prefix: 8 })

function collection8_indexify (record) {
  const a = record.type
  return a === undefined ? [] : [a]
}

// '@pear/error-logs' reconstruction function
function collection8_reconstruct (version, keyBuf, valueBuf) {
  const key = collection8_key.decode(keyBuf)
  const value = c.decode(resolveStruct('@pear/error-logs/value', version), valueBuf)
  // TODO: This should be fully code generated
  return {
    type: key[0],
    ...value
  }
}

// '@pear/error-logs'
const collection8 = {
  name: '@pear/error-logs',
  id: 8,
  encodeKey (record) {
    const key = [record.type]
    return collection8_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection8_key.encodeRange({
      gt: gt ? collection8_indexify(gt) : null,
      lt: lt ? collection8_indexify(lt) : null,
      gte: gte ? collection8_indexify(gte) : null,
      lte: lte ? collection8_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/error-logs/value', version), record)
  },
  trigger: null,
  reconstruct: collection8_reconstruct,
  indexes: []
}

// '@pear/perf-stats' collection key
const collection9_key = new IndexEncoder([
], { prefix: 9 })

function collection9_indexify (record) {
  return []
}

// '@pear/perf-stats' reconstruction function
function collection9_reconstruct (version, keyBuf, valueBuf) {
  const value = c.decode(resolveStruct('@pear/perf-stats/value', version), valueBuf)
  return value
}

// '@pear/perf-stats'
const collection9 = {
  name: '@pear/perf-stats',
  id: 9,
  encodeKey (record) {
    const key = []
    return collection9_key.encode(key)
  },
  encodeKeyRange ({ gt, lt, gte, lte } = {}) {
    return collection9_key.encodeRange({
      gt: gt ? collection9_indexify(gt) : null,
      lt: lt ? collection9_indexify(lt) : null,
      gte: gte ? collection9_indexify(gte) : null,
      lte: lte ? collection9_indexify(lte) : null
    })
  },
  encodeValue (version, record) {
    return c.encode(resolveStruct('@pear/perf-stats/value', version), record)
  },
  trigger: null,
  reconstruct: collection9_reconstruct,
  indexes: []
}

module.exports = {
  version,
  collections: [
    collection0,
    collection1,
    collection2,
    collection3,
    collection4,
    collection5,
    collection6,
    collection7,
    collection8,
    collection9
  ],
  indexes: [
  ],
  resolveCollection,
  resolveIndex
}

function resolveCollection (name) {
  switch (name) {
    case '@pear/dht': return collection0
    case '@pear/encryption-keys': return collection1
    case '@pear/permits': return collection2
    case '@pear/identity': return collection3
    case '@pear/apps': return collection4
    case '@pear/apps-owned': return collection5
    case '@pear/app-storage': return collection6
    case '@pear/channels': return collection7
    case '@pear/error-logs': return collection8
    case '@pear/perf-stats': return collection9
    default: return null
  }
}

function resolveIndex (name) {
  switch (name) {
    default: return null
  }
}
