// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const { c } = require('hyperschema/runtime')

const VERSION = 1

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @pear/node
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.host)
    c.uint.preencode(state, m.port)
  },
  encode (state, m) {
    c.string.encode(state, m.host)
    c.uint.encode(state, m.port)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)

    return {
      host: r0,
      port: r1
    }
  }
}

// @pear/manifest
const encoding1 = {
  preencode (state, m) {
    c.uint.preencode(state, m.version)
  },
  encode (state, m) {
    c.uint.encode(state, m.version)
  },
  decode (state) {
    const r0 = c.uint.decode(state)

    return {
      version: r0
    }
  }
}

// @pear/dht.nodes
const encoding2_0 = c.array(c.frame(encoding0))

// @pear/dht
const encoding2 = {
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.nodes) encoding2_0.preencode(state, m.nodes)
  },
  encode (state, m) {
    const flags = m.nodes ? 1 : 0

    c.uint.encode(state, flags)

    if (m.nodes) encoding2_0.encode(state, m.nodes)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      nodes: (flags & 1) !== 0 ? encoding2_0.decode(state) : null
    }
  }
}

// @pear/bundle.tags
const encoding3_3 = c.array(c.string)

// @pear/bundle
const encoding3 = {
  preencode (state, m) {
    c.string.preencode(state, m.link)
    c.string.preencode(state, m.appStorage)
    state.end++ // max flag is 2 so always one byte

    if (m.encryptionKey) c.fixed32.preencode(state, m.encryptionKey)
    if (m.tags) encoding3_3.preencode(state, m.tags)
  },
  encode (state, m) {
    const flags =
      (m.encryptionKey ? 1 : 0) |
      (m.tags ? 2 : 0)

    c.string.encode(state, m.link)
    c.string.encode(state, m.appStorage)
    c.uint.encode(state, flags)

    if (m.encryptionKey) c.fixed32.encode(state, m.encryptionKey)
    if (m.tags) encoding3_3.encode(state, m.tags)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      link: r0,
      appStorage: r1,
      encryptionKey: (flags & 1) !== 0 ? c.fixed32.decode(state) : null,
      tags: (flags & 2) !== 0 ? encoding3_3.decode(state) : null
    }
  }
}

// @pear/gc
const encoding4 = {
  preencode (state, m) {
    c.string.preencode(state, m.path)
  },
  encode (state, m) {
    c.string.encode(state, m.path)
  },
  decode (state) {
    const r0 = c.string.decode(state)

    return {
      path: r0
    }
  }
}

// @pear/assets.only
const encoding5_4 = encoding3_3

// @pear/assets
const encoding5 = {
  preencode (state, m) {
    c.string.preencode(state, m.link)
    c.string.preencode(state, m.ns)
    c.string.preencode(state, m.path)
    state.end++ // max flag is 4 so always one byte

    if (m.name) c.string.preencode(state, m.name)
    if (m.only) encoding5_4.preencode(state, m.only)
    if (m.bytes) c.uint.preencode(state, m.bytes)
  },
  encode (state, m) {
    const flags =
      (m.name ? 1 : 0) |
      (m.only ? 2 : 0) |
      (m.bytes ? 4 : 0)

    c.string.encode(state, m.link)
    c.string.encode(state, m.ns)
    c.string.encode(state, m.path)
    c.uint.encode(state, flags)

    if (m.name) c.string.encode(state, m.name)
    if (m.only) encoding5_4.encode(state, m.only)
    if (m.bytes) c.uint.encode(state, m.bytes)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      link: r0,
      ns: r1,
      path: r2,
      name: (flags & 1) !== 0 ? c.string.decode(state) : null,
      only: (flags & 2) !== 0 ? encoding5_4.decode(state) : null,
      bytes: (flags & 4) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @pear/checkout
const encoding6 = {
  preencode (state, m) {
    c.uint.preencode(state, m.fork)
    c.uint.preencode(state, m.length)
  },
  encode (state, m) {
    c.uint.encode(state, m.fork)
    c.uint.encode(state, m.length)
  },
  decode (state) {
    const r0 = c.uint.decode(state)
    const r1 = c.uint.decode(state)

    return {
      fork: r0,
      length: r1
    }
  }
}

// @pear/current.checkout
const encoding7_1 = c.frame(encoding6)

// @pear/current
const encoding7 = {
  preencode (state, m) {
    c.string.preencode(state, m.link)
    state.end++ // max flag is 1 so always one byte

    if (m.checkout) encoding7_1.preencode(state, m.checkout)
  },
  encode (state, m) {
    const flags = m.checkout ? 1 : 0

    c.string.encode(state, m.link)
    c.uint.encode(state, flags)

    if (m.checkout) encoding7_1.encode(state, m.checkout)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      link: r0,
      checkout: (flags & 1) !== 0 ? encoding7_1.decode(state) : null
    }
  }
}

// @pear/assets.only
const encoding8_4 = encoding2_4

// @pear/assets
const encoding8 = {
  preencode (state, m) {
    c.string.preencode(state, m.link)
    c.string.preencode(state, m.ns)
    c.string.preencode(state, m.path)
    state.end++ // max flag is 4 so always one byte

    if (m.name) c.string.preencode(state, m.name)
    if (m.only) encoding8_4.preencode(state, m.only)
    if (m.bytes) c.uint.preencode(state, m.bytes)
  },
  encode (state, m) {
    const flags =
      (m.name ? 1 : 0) |
      (m.only ? 2 : 0) |
      (m.bytes ? 4 : 0)

    c.string.encode(state, m.link)
    c.string.encode(state, m.ns)
    c.string.encode(state, m.path)
    c.uint.encode(state, flags)

    if (m.name) c.string.encode(state, m.name)
    if (m.only) encoding8_4.encode(state, m.only)
    if (m.bytes) c.uint.encode(state, m.bytes)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      link: r0,
      ns: r1,
      path: r2,
      name: (flags & 1) !== 0 ? c.string.decode(state) : null,
      only: (flags & 2) !== 0 ? encoding8_4.decode(state) : null,
      bytes: (flags & 4) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

// @pear/gc/hyperdb#2
const encoding9 = {
  preencode (state, m) {

  },
  encode (state, m) {

  },
  decode (state) {
    return {
      path: null
    }
  }
}

// @pear/bundle/hyperdb#3.tags
<<<<<<< HEAD
const encoding9_3 = encoding3_3
=======
const encoding10_3 = encoding2_4
>>>>>>> 88fc2507 (spec)

// @pear/bundle/hyperdb#3
const encoding10 = {
  preencode (state, m) {
    c.string.preencode(state, m.appStorage)
    state.end++ // max flag is 2 so always one byte

    if (m.encryptionKey) c.fixed32.preencode(state, m.encryptionKey)
    if (m.tags) encoding10_3.preencode(state, m.tags)
  },
  encode (state, m) {
    const flags =
      (m.encryptionKey ? 1 : 0) |
      (m.tags ? 2 : 0)

    c.string.encode(state, m.appStorage)
    c.uint.encode(state, flags)

    if (m.encryptionKey) c.fixed32.encode(state, m.encryptionKey)
    if (m.tags) encoding10_3.encode(state, m.tags)
  },
  decode (state) {
    const r1 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      link: null,
      appStorage: r1,
      encryptionKey: (flags & 1) !== 0 ? c.fixed32.decode(state) : null,
      tags: (flags & 2) !== 0 ? encoding10_3.decode(state) : null
    }
  }
}

<<<<<<< HEAD
// @pear/assets/hyperdb#5.only
const encoding10_4 = encoding3_3

// @pear/assets/hyperdb#5
const encoding10 = {
=======
// @pear/asset/hyperdb#4.only
const encoding11_4 = encoding2_4

// @pear/asset/hyperdb#4
const encoding11 = {
>>>>>>> 88fc2507 (spec)
  preencode (state, m) {
    c.string.preencode(state, m.ns)
    c.string.preencode(state, m.path)
    state.end++ // max flag is 4 so always one byte

    if (m.name) c.string.preencode(state, m.name)
    if (m.only) encoding11_4.preencode(state, m.only)
    if (m.bytes) c.uint.preencode(state, m.bytes)
  },
  encode (state, m) {
    const flags =
      (m.name ? 1 : 0) |
      (m.only ? 2 : 0) |
      (m.bytes ? 4 : 0)

    c.string.encode(state, m.ns)
    c.string.encode(state, m.path)
    c.uint.encode(state, flags)

    if (m.name) c.string.encode(state, m.name)
    if (m.only) encoding11_4.encode(state, m.only)
    if (m.bytes) c.uint.encode(state, m.bytes)
  },
  decode (state) {
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      link: null,
      ns: r1,
      path: r2,
      name: (flags & 1) !== 0 ? c.string.decode(state) : null,
      only: (flags & 2) !== 0 ? encoding11_4.decode(state) : null,
      bytes: (flags & 4) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

<<<<<<< HEAD
// @pear/current/hyperdb#6.checkout
const encoding11_1 = encoding7_1

// @pear/current/hyperdb#6
const encoding11 = {
=======
// @pear/current/hyperdb#5.checkout
const encoding12_1 = encoding7_1

// @pear/current/hyperdb#5
const encoding12 = {
>>>>>>> 88fc2507 (spec)
  preencode (state, m) {
    state.end++ // max flag is 1 so always one byte

    if (m.checkout) encoding12_1.preencode(state, m.checkout)
  },
  encode (state, m) {
    const flags = m.checkout ? 1 : 0

    c.uint.encode(state, flags)

    if (m.checkout) encoding12_1.encode(state, m.checkout)
  },
  decode (state) {
    const flags = c.uint.decode(state)

    return {
      link: null,
      checkout: (flags & 1) !== 0 ? encoding12_1.decode(state) : null
    }
  }
}

// @pear/assets/hyperdb#7.only
const encoding13_4 = encoding2_4

// @pear/assets/hyperdb#7
const encoding13 = {
  preencode (state, m) {
    c.string.preencode(state, m.ns)
    c.string.preencode(state, m.path)
    state.end++ // max flag is 4 so always one byte

    if (m.name) c.string.preencode(state, m.name)
    if (m.only) encoding13_4.preencode(state, m.only)
    if (m.bytes) c.uint.preencode(state, m.bytes)
  },
  encode (state, m) {
    const flags =
      (m.name ? 1 : 0) |
      (m.only ? 2 : 0) |
      (m.bytes ? 4 : 0)

    c.string.encode(state, m.ns)
    c.string.encode(state, m.path)
    c.uint.encode(state, flags)

    if (m.name) c.string.encode(state, m.name)
    if (m.only) encoding13_4.encode(state, m.only)
    if (m.bytes) c.uint.encode(state, m.bytes)
  },
  decode (state) {
    const r1 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const flags = c.uint.decode(state)

    return {
      link: null,
      ns: r1,
      path: r2,
      name: (flags & 1) !== 0 ? c.string.decode(state) : null,
      only: (flags & 2) !== 0 ? encoding13_4.decode(state) : null,
      bytes: (flags & 4) !== 0 ? c.uint.decode(state) : 0
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@pear/node': return encoding0
    case '@pear/manifest': return encoding1
    case '@pear/dht': return encoding2
    case '@pear/bundle': return encoding3
    case '@pear/gc': return encoding4
    case '@pear/assets': return encoding5
    case '@pear/checkout': return encoding6
    case '@pear/current': return encoding7
<<<<<<< HEAD
    case '@pear/gc/hyperdb#2': return encoding8
    case '@pear/bundle/hyperdb#3': return encoding9
    case '@pear/assets/hyperdb#5': return encoding10
    case '@pear/current/hyperdb#6': return encoding11
=======
    case '@pear/assets': return encoding8
    case '@pear/gc/hyperdb#2': return encoding9
    case '@pear/bundle/hyperdb#3': return encoding10
    case '@pear/asset/hyperdb#4': return encoding11
    case '@pear/current/hyperdb#5': return encoding12
    case '@pear/assets/hyperdb#7': return encoding13
>>>>>>> 88fc2507 (spec)
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
