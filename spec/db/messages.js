// This file is autogenerated by the hyperschema compiler
// Schema Version: 1
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 1
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @pear/node
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.host)
    c.uint.preencode(state, m.port)
  },
  encode (state, m) {
    c.string.encode(state, m.host)
    c.uint.encode(state, m.port)
  },
  decode (state) {
    const res = {}
    res.host = null
    res.port = 0

    res.host = c.string.decode(state)
    res.port = c.uint.decode(state)

    return res
  }
}

// @pear/dht.nodes
const encoding1_0 = c.frame(c.array(encoding0))

// @pear/dht
const encoding1 = {
  preencode (state, m) {
    let flags = 0
    if (m.nodes) flags |= 1

    c.uint.preencode(state, flags)

    if (m.nodes) encoding1_0.preencode(state, m.nodes)
  },
  encode (state, m) {
    let flags = 0
    if (m.nodes) flags |= 1

    c.uint.encode(state, flags)

    if (m.nodes) encoding1_0.encode(state, m.nodes)
  },
  decode (state) {
    const res = {}
    res.nodes = null

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.nodes = encoding1_0.decode(state)

    return res
  }
}

// @pear/bundle.tags
const encoding2_3 = c.array(c.string)

// @pear/bundle
const encoding2 = {
  preencode (state, m) {
    let flags = 0
    if (m.encryptionKey) flags |= 1
    if (m.tags) flags |= 2

    c.string.preencode(state, m.link)
    c.string.preencode(state, m.appStorage)
    c.uint.preencode(state, flags)

    if (m.encryptionKey) c.fixed32.preencode(state, m.encryptionKey)
    if (m.tags) encoding2_3.preencode(state, m.tags)
  },
  encode (state, m) {
    let flags = 0
    if (m.encryptionKey) flags |= 1
    if (m.tags) flags |= 2

    c.string.encode(state, m.link)
    c.string.encode(state, m.appStorage)
    c.uint.encode(state, flags)

    if (m.encryptionKey) c.fixed32.encode(state, m.encryptionKey)
    if (m.tags) encoding2_3.encode(state, m.tags)
  },
  decode (state) {
    const res = {}
    res.link = null
    res.appStorage = null
    res.encryptionKey = null
    res.tags = null

    res.link = c.string.decode(state)
    res.appStorage = c.string.decode(state)

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.encryptionKey = c.fixed32.decode(state)
    if ((flags & 2) !== 0) res.tags = encoding2_3.decode(state)

    return res
  }
}

// @pear/dht/value.nodes
const encoding3_0 = c.frame(c.array(encoding0))

// @pear/dht/value
const encoding3 = {
  preencode (state, m) {
    let flags = 0
    if (m.nodes) flags |= 1

    c.uint.preencode(state, flags)

    if (m.nodes) encoding3_0.preencode(state, m.nodes)
  },
  encode (state, m) {
    let flags = 0
    if (m.nodes) flags |= 1

    c.uint.encode(state, flags)

    if (m.nodes) encoding3_0.encode(state, m.nodes)
  },
  decode (state) {
    const res = {}
    res.nodes = null

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.nodes = encoding3_0.decode(state)

    return res
  }
}

// @pear/bundle/value.tags
const encoding4_2 = c.array(c.string)

// @pear/bundle/value
const encoding4 = {
  preencode (state, m) {
    let flags = 0
    if (m.encryptionKey) flags |= 1
    if (m.tags) flags |= 2

    c.string.preencode(state, m.appStorage)
    c.uint.preencode(state, flags)

    if (m.encryptionKey) c.fixed32.preencode(state, m.encryptionKey)
    if (m.tags) encoding4_2.preencode(state, m.tags)
  },
  encode (state, m) {
    let flags = 0
    if (m.encryptionKey) flags |= 1
    if (m.tags) flags |= 2

    c.string.encode(state, m.appStorage)
    c.uint.encode(state, flags)

    if (m.encryptionKey) c.fixed32.encode(state, m.encryptionKey)
    if (m.tags) encoding4_2.encode(state, m.tags)
  },
  decode (state) {
    const res = {}
    res.appStorage = null
    res.encryptionKey = null
    res.tags = null

    res.appStorage = c.string.decode(state)

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.encryptionKey = c.fixed32.decode(state)
    if ((flags & 2) !== 0) res.tags = encoding4_2.decode(state)

    return res
  }
}

function getStructByName (name) {
  switch (name) {
    case '@pear/node': return encoding0
    case '@pear/dht': return encoding1
    case '@pear/bundle': return encoding2
    case '@pear/dht/value': return encoding3
    case '@pear/bundle/value': return encoding4
    default: throw new Error('Encoder not found ' + name)
  }
}

function resolveStruct (name, v = VERSION) {
  const enc = getStructByName(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

module.exports = { resolveStruct, version }
