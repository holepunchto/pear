// This file is autogenerated by the hyperschema compiler
// Schema Version: 2
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 2
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @example/struct1
const encoding0 = {
  preencode (state, m) {
    c.fixed32.preencode(state, m.field1)
    c.uint.preencode(state, m.field1)
  },
  encode (state, m) {
    c.fixed32.encode(state, m.field1)
    c.uint.encode(state, m.field1)
  },
  decode (state) {
    const res = {}
    res.field1 = null
    res.field1 = 0

    res.field1 = c.fixed32.decode(state)
    res.field1 = c.uint.decode(state)

    return res
  }
}

// @example/struct2
const encoding1 = {
  preencode (state, m) {
    encoding0.preencode(state, m.field1)
    encoding0.preencode(state, m.field2)
  },
  encode (state, m) {
    encoding0.encode(state, m.field1)
    encoding0.encode(state, m.field2)
  },
  decode (state) {
    const res = {}
    res.field1 = null
    res.field2 = null

    res.field1 = encoding0.decode(state)
    res.field2 = encoding0.decode(state)

    return res
  }
}

// @example/record1.struct1
const encoding2_3 = c.frame(encoding1)
// @example/record1.tags
const encoding2_6 = c.array(c.string)

// @example/record1
const encoding2 = {
  preencode (state, m) {
    let flags = 0
    if (m.name) flags |= 1
    if (m.age) flags |= 2
    if (m.tags) flags |= 4

    c.uint.preencode(state, m.id1)
    c.uint.preencode(state, m.id2)
    c.uint.preencode(state, m.id3)
    encoding2_3.preencode(state, m.struct1)
    c.uint.preencode(state, flags)

    if (m.name) c.string.preencode(state, m.name)
    if (m.age) c.uint.preencode(state, m.age)
    if (m.tags) encoding2_6.preencode(state, m.tags)
  },
  encode (state, m) {
    let flags = 0
    if (m.name) flags |= 1
    if (m.age) flags |= 2
    if (m.tags) flags |= 4

    c.uint.encode(state, m.id1)
    c.uint.encode(state, m.id2)
    c.uint.encode(state, m.id3)
    encoding2_3.encode(state, m.struct1)
    c.uint.encode(state, flags)

    if (m.name) c.string.encode(state, m.name)
    if (m.age) c.uint.encode(state, m.age)
    if (m.tags) encoding2_6.encode(state, m.tags)
  },
  decode (state) {
    const res = {}
    res.id1 = 0
    res.id2 = 0
    res.id3 = 0
    res.struct1 = null
    res.name = null
    res.age = 0
    res.tags = null

    res.id1 = c.uint.decode(state)
    res.id2 = c.uint.decode(state)
    res.id3 = c.uint.decode(state)
    res.struct1 = encoding2_3.decode(state)

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.name = c.string.decode(state)
    if ((flags & 2) !== 0) res.age = c.uint.decode(state)
    if ((flags & 4) !== 0) res.tags = encoding2_6.decode(state)

    return res
  }
}

// @example/collection-info
const encoding3 = {
  preencode (state, m) {
    let flags = 0
    if (m.count) flags |= 1

    c.uint.preencode(state, flags)

    if (m.count) c.uint.preencode(state, m.count)
  },
  encode (state, m) {
    let flags = 0
    if (m.count) flags |= 1

    c.uint.encode(state, flags)

    if (m.count) c.uint.encode(state, m.count)
  },
  decode (state) {
    const res = {}
    res.count = 0

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((flags & 1) !== 0) res.count = c.uint.decode(state)

    return res
  }
}

// @pear/struct1
const encoding4 = {
  preencode (state, m) {
    c.fixed32.preencode(state, m.field1)
    c.uint.preencode(state, m.field1)
  },
  encode (state, m) {
    c.fixed32.encode(state, m.field1)
    c.uint.encode(state, m.field1)
  },
  decode (state) {
    const res = {}
    if (version >= 2) res.field1 = null
    if (version >= 2) res.field1 = 0

    res.field1 = c.fixed32.decode(state)
    res.field1 = c.uint.decode(state)

    return res
  }
}

// @pear/struct2
const encoding5 = {
  preencode (state, m) {
    encoding0.preencode(state, m.field1)
    encoding0.preencode(state, m.field2)
  },
  encode (state, m) {
    encoding0.encode(state, m.field1)
    encoding0.encode(state, m.field2)
  },
  decode (state) {
    const res = {}
    if (version >= 2) res.field1 = null
    if (version >= 2) res.field2 = null

    res.field1 = encoding0.decode(state)
    res.field2 = encoding0.decode(state)

    return res
  }
}

// @pear/record1.struct1
const encoding6_3 = c.frame(encoding1)
// @pear/record1.tags
const encoding6_6 = c.array(c.string)

// @pear/record1
const encoding6 = {
  preencode (state, m) {
    let flags = 0
    if ((version >= 2) && m.name) flags |= 1
    if ((version >= 2) && m.age) flags |= 2
    if ((version >= 2) && m.tags) flags |= 4

    c.uint.preencode(state, m.id1)
    c.uint.preencode(state, m.id2)
    c.uint.preencode(state, m.id3)
    encoding6_3.preencode(state, m.struct1)
    c.uint.preencode(state, flags)

    if ((version >= 2) && m.name) c.string.preencode(state, m.name)
    if ((version >= 2) && m.age) c.uint.preencode(state, m.age)
    if ((version >= 2) && m.tags) encoding6_6.preencode(state, m.tags)
  },
  encode (state, m) {
    let flags = 0
    if ((version >= 2) && m.name) flags |= 1
    if ((version >= 2) && m.age) flags |= 2
    if ((version >= 2) && m.tags) flags |= 4

    c.uint.encode(state, m.id1)
    c.uint.encode(state, m.id2)
    c.uint.encode(state, m.id3)
    encoding6_3.encode(state, m.struct1)
    c.uint.encode(state, flags)

    if ((version >= 2) && m.name) c.string.encode(state, m.name)
    if ((version >= 2) && m.age) c.uint.encode(state, m.age)
    if ((version >= 2) && m.tags) encoding6_6.encode(state, m.tags)
  },
  decode (state) {
    const res = {}
    if (version >= 2) res.id1 = 0
    if (version >= 2) res.id2 = 0
    if (version >= 2) res.id3 = 0
    if (version >= 2) res.struct1 = null
    if (version >= 2) res.name = null
    if (version >= 2) res.age = 0
    if (version >= 2) res.tags = null

    res.id1 = c.uint.decode(state)
    res.id2 = c.uint.decode(state)
    res.id3 = c.uint.decode(state)
    res.struct1 = encoding6_3.decode(state)

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((version >= 2) && (flags & 1) !== 0) res.name = c.string.decode(state)
    if ((version >= 2) && (flags & 2) !== 0) res.age = c.uint.decode(state)
    if ((version >= 2) && (flags & 4) !== 0) res.tags = encoding6_6.decode(state)

    return res
  }
}

// @pear/collection-info
const encoding7 = {
  preencode (state, m) {
    let flags = 0
    if ((version >= 2) && m.count) flags |= 1

    c.uint.preencode(state, flags)

    if ((version >= 2) && m.count) c.uint.preencode(state, m.count)
  },
  encode (state, m) {
    let flags = 0
    if ((version >= 2) && m.count) flags |= 1

    c.uint.encode(state, flags)

    if ((version >= 2) && m.count) c.uint.encode(state, m.count)
  },
  decode (state) {
    const res = {}
    if (version >= 2) res.count = 0

    const flags = state.start < state.end ? c.uint.decode(state) : 0
    if ((version >= 2) && (flags & 1) !== 0) res.count = c.uint.decode(state)

    return res
  }
}

function getStructByName (name) {
  switch (name) {
    case '@example/struct1': return encoding0
    case '@example/struct2': return encoding1
    case '@example/record1': return encoding2
    case '@example/collection-info': return encoding3
    case '@pear/struct1': return encoding4
    case '@pear/struct2': return encoding5
    case '@pear/record1': return encoding6
    case '@pear/collection-info': return encoding7
    default: throw new Error('Encoder not found ' + name)
  }
}

function resolveStruct (name, v = VERSION) {
  const enc = getStructByName(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

module.exports = { resolveStruct, version }
